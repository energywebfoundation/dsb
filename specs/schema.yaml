openapi: "3.0.0"
info:
  title: "DSB Message Broker API"
  description: "Swagger documentation for the DSB Message Broker API"
  version: "0.1"
  contact: {}
tags: []
servers: []
components:
  schemas:
    PublishMessageDto:
      type: "object"
      properties:
        fqcn:
          type: "string"
          format: "{channel_name}.channels.{app_name}.apps.{organization_name}.iam.ewc"
          description: "Fully Qualified Channel Name (fcqn)"
        topic:
          type: "string"
          description: "Topic name for the message (default value is \"default\")"
        payload:
          type: "string"
          description: "Any stringified payload like JSON, BASE64 etc"
          example: "{\"data\": \"test\"}"
        signature:
          type: "string"
          description: "Compacted EcdsaSecp256k1Signature2019"
      required:
        - "fqcn"
        - "payload"
        - "signature"
    MessageDTO:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Message id"
          example: "msg-#1"
        topic:
          type: "string"
          description: "Message topic"
          example: "default"
        payload:
          type: "string"
          description: "Any stringified payload like JSON, BASE64 etc"
          example: "{\"data\": \"test\"}"
        sender:
          type: "string"
          description: "Sender of the message"
          example: "did:ethr:0x57618002cF07E53De4a5abf1e8735882169f2efB"
        signature:
          type: "string"
          description: "Compacted EcdsaSecp256k1Signature2019"
        timestampNanos:
          type: "string"
          description: "Message published timestamp in nanoseconds"
      required:
        - "id"
        - "topic"
        - "payload"
        - "sender"
        - "signature"
        - "timestampNanos"
    CreateChannelDto:
      type: "object"
      properties:
        fqcn:
          type: "string"
          format: "{channel_name}.channels.{app_name}.apps.{organization_name}.iam.ewc"
          description: "Fully Qualified Channel Name (fcqn)"
        topics:
          type: "object"
          properties:
            namespace:
              type: "string"
            schema:
              type: "string | JSONSchemaType"
          description: "Array of topic objects that determines topics for messages."
        admins:
          description: "Array of DIDs that have permision to edit the channel. If it is ommited, creator of the channel will be the default admin."
          type: "array"
          items:
            type: "array"
        publishers:
          description: "A mixed array of DIDs and roles that have permision to publish messages to the channel. If it is ommited, any user with \"user\" role can publish messages to the channel."
          type: "array"
          items:
            type: "array"
        subscribers:
          description: "A mixed array of DIDs and roles that have permision to subscribe to the channel. If it is ommited, any user with \"user\" role can subscribe to the channel."
          type: "array"
          items:
            type: "array"
        maxMsgAge:
          type: "number"
          description: "Maximum age of any message in the channel, expressed in nanoseconds."
        maxMsgSize:
          type: "number"
          description: "Maximum size of any message in the channel, expressed in bytes."
      required:
        - "fqcn"
    UpdateChannelDto:
      type: "object"
      properties:
        fqcn:
          type: "string"
          format: "{channel_name}.channels.{app_name}.apps.{organization_name}.iam.ewc"
          description: "Fully Qualified Channel Name (fcqn)"
        topics:
          type: "object"
          properties:
            namespace:
              type: "string"
            schema:
              type: "string | JSONSchemaType"
          description: "Array of topic objects that determines topics for messages."
        admins:
          description: "Array of DIDs that have permision to edit the channel. If it is ommited, creator of the channel will be the default admin."
          type: "array"
          items:
            type: "array"
        publishers:
          description: "A mixed array of DIDs and roles that have permision to publish messages to the channel. If it is ommited, any user with \"user\" role can publish messages to the channel."
          type: "array"
          items:
            type: "array"
        subscribers:
          description: "A mixed array of DIDs and roles that have permision to subscribe to the channel. If it is ommited, any user with \"user\" role can subscribe to the channel."
          type: "array"
          items:
            type: "array"
        maxMsgAge:
          type: "number"
          description: "Maximum age of any message in the channel, expressed in nanoseconds."
        maxMsgSize:
          type: "number"
          description: "Maximum size of any message in the channel, expressed in bytes."
      required:
        - "fqcn"
    LoginDataDTO:
      type: "object"
      properties:
        identityToken:
          type: "string"
          description: "ES256 signed JWT token"
      required:
        - "identityToken"
    LoginReturnDataDTO:
      type: "object"
      properties:
        did:
          type: "string"
          description: "DID of messagebroker which is the DID identifier corresponding to env.PRIVATE_KEY"
        address:
          type: "string"
          description: "address of the env.PRIVATE_KEY for signature recovery purposes"
        signature:
          type: "string"
          description: "the compact hex signature which is ECDSA hash(address of privatekey+messagebrokerDID+userDID)"
      required:
        - "did"
        - "address"
        - "signature"
paths:
  /message:
    post:
      operationId: "MessageController_publish"
      summary: ""
      description: "Pushes a message to a topic in a channel."
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishMessageDto"
      responses:
        202:
          description: "Message id that is local to fqcn"
          content:
            application/json:
              schema:
                type: "string"
      tags:
        - "message"
      security:
        - access-token: []
    get:
      operationId: "MessageController_getNewFromChannel"
      summary: ""
      description: "Pulls new message from a topic in a channel."
      parameters:
        - name: "fqcn"
          required: true
          in: "query"
          description: "Fully qualified channel name (fqcn)"
          example: "test.channels.testapp.apps.testorganization.iam.ewc"
          schema:
            type: "string"
        - name: "amount"
          required: false
          in: "query"
          description: "Amount of messages to be returned in the request, default value is 100"
          example: "100"
          schema:
            type: "string"
      responses:
        200:
          description: "Pull and returns messages from given channel"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MessageDTO"
      tags:
        - "message"
      security:
        - access-token: []
  /channel:
    post:
      operationId: "ChannelController_createChannel"
      summary: ""
      description: "Creates a channel"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChannelDto"
      responses:
        202:
          description: "Created channel's name"
          content:
            application/json:
              schema:
                type: "string"
      tags:
        - "channel"
      security:
        - access-token: []
    patch:
      operationId: "ChannelController_updateChannel"
      summary: ""
      description: "Updates a channel"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChannelDto"
      responses:
        202:
          description: "Update result"
          content:
            application/json:
              schema:
                type: "string"
      tags:
        - "channel"
      security:
        - access-token: []
  /channel/pubsub:
    get:
      operationId: "ChannelController_getAccessibleChannels"
      summary: ""
      description: "Returns the list of accessible channels to publish or subscribe based on DID and verified-roles of the user"
      parameters: []
      responses:
        200:
          description: "Array of channels with their options"
          content:
            application/json:
              schema:
                type: "array"
      tags:
        - "channel"
      security:
        - access-token: []
  /channel/{fqcn}:
    get:
      operationId: "ChannelController_getChannel"
      summary: ""
      description: "Returns the requested channel's options"
      parameters:
        - name: "fqcn"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Channel options"
          content:
            application/json:
              schema:
                type: "object"
      tags:
        - "channel"
      security:
        - access-token: []
  /health:
    get:
      operationId: "HealthController_check"
      parameters: []
      responses:
        200:
          description: "The Health Check is successful"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "ok"
                  info:
                    type: "object"
                    example:
                      database:
                        status: "up"
                    additionalProperties:
                      type: "object"
                      properties:
                        status:
                          type: "string"
                      additionalProperties:
                        type: "string"
                    nullable: true
                  error:
                    type: "object"
                    example: {}
                    additionalProperties:
                      type: "object"
                      properties:
                        status:
                          type: "string"
                      additionalProperties:
                        type: "string"
                    nullable: true
                  details:
                    type: "object"
                    example:
                      database:
                        status: "up"
                    additionalProperties:
                      type: "object"
                      properties:
                        status:
                          type: "string"
                      additionalProperties:
                        type: "string"
        503:
          description: "The Health Check is not successful"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "error"
                  info:
                    type: "object"
                    example:
                      database:
                        status: "up"
                    additionalProperties:
                      type: "object"
                      properties:
                        status:
                          type: "string"
                      additionalProperties:
                        type: "string"
                    nullable: true
                  error:
                    type: "object"
                    example:
                      redis:
                        status: "down"
                        message: "Could not connect"
                    additionalProperties:
                      type: "object"
                      properties:
                        status:
                          type: "string"
                      additionalProperties:
                        type: "string"
                    nullable: true
                  details:
                    type: "object"
                    example:
                      database:
                        status: "up"
                      redis:
                        status: "down"
                        message: "Could not connect"
                    additionalProperties:
                      type: "object"
                      properties:
                        status:
                          type: "string"
                      additionalProperties:
                        type: "string"
      tags:
        - "health"
  /auth/login:
    post:
      operationId: "AuthController_login"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDataDTO"
      responses:
        200:
          description: "Log in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginReturnDataDTO"
      tags:
        - "auth"
      security:
        - access-token: []
